import os
import sys
import time
import json
import random
import signal
import threading
import traceback
from datetime import datetime

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiTelegramException

# ========= –ö–æ–Ω—Ñ–∏–≥ =========
BOT_TOKEN = (os.environ.get("BOT_TOKEN") or "").strip()
PARTNER_LINK = os.environ.get("PARTNER_LINK", "https://example.com")
USERS_FILE = os.environ.get("USERS_FILE", "/app/data/users_data.json")

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    sys.exit(1)

# ========= –í—Ä–µ–º—è (MSK) =========
try:
    from zoneinfo import ZoneInfo
    def get_msk_time_str():
        return datetime.now(ZoneInfo("Europe/Moscow")).strftime("%H:%M:%S")
except Exception:
    def get_msk_time_str():
        # fallback UTC+3
        return time.strftime("%H:%M:%S", time.gmtime(time.time() + 3 * 3600))

# ========= –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç =========
bot = telebot.TeleBot(BOT_TOKEN)
shutdown_flag = False

# ========= –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ =========
_users_file_lock = threading.Lock()

# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π =========
def _ensure_dir(path: str):
    d = os.path.dirname(path)
    if d:
        os.makedirs(d, exist_ok=True)

def load_users_data():
    try:
        _ensure_dir(USERS_FILE)
        if not os.path.exists(USERS_FILE):
            print(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: {USERS_FILE}")
            return {}
        with _users_file_lock:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                try:
                    return json.load(f) or {}
                except json.JSONDecodeError:
                    print("‚ö†Ô∏è JSONDecodeError: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
                    return {}
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return {}

def save_users_data(data: dict):
    try:
        _ensure_dir(USERS_FILE)
        with _users_file_lock:
            with open(USERS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()

# ========= User data helpers =========
def init_user(user_id: str) -> dict:
    return {
        "auto_update": False,
        "last_signal_time": 0.0,
        "current_signal": None,
        "stats": {"wins": 0, "losses": 0, "balance": 0}
    }

def ensure_user_data(user_id: str, data: dict) -> dict:
    if user_id not in data:
        data[user_id] = init_user(user_id)
        save_users_data(data)
    return data

# ========= UI: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =========
def get_main_menu():
    mk = InlineKeyboardMarkup(row_width=2)
    mk.add(
        InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="tips_page_1"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    mk.add(
        InlineKeyboardButton("‚ö° VIP –°–∏–≥–Ω–∞–ª", callback_data="get_signal"),
        InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    )
    mk.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    return mk

# ========= –°–∏–≥–Ω–∞–ª—ã –∏ —Å–µ—Ç–∫–∞ =========
LETTERS = ["A", "B", "C", "D", "E"]
NUMBERS = ["1", "2", "3", "4", "5"]

def generate_signal():
    win_chance = random.choice([85, 87, 89, 91, 93, 95, 97])
    bet_amount = random.choice([100, 150, 200, 250, 300, 400, 500, 750, 1000])
    clicks = random.choice([2, 3, 4, 5])
    if clicks == 2:
        multiplier = round(random.uniform(1.8, 2.5), 2)
    elif clicks == 3:
        multiplier = round(random.uniform(2.2, 3.2), 2)
    elif clicks == 4:
        multiplier = round(random.uniform(2.8, 4.0), 2)
    else:
        multiplier = round(random.uniform(3.5, 5.0), 2)
    return {"win_chance": win_chance, "bet_amount": bet_amount, "clicks": clicks, "multiplier": multiplier}

def generate_coords_sequence(steps_count: int):
    cells = [f"{l}{n}" for l in LETTERS for n in NUMBERS]
    random.shuffle(cells)
    return cells[:steps_count]

def render_grid_with_labels():
    header = "    " + "  ".join(NUMBERS)
    rows = [f"{letter} | ‚¨õ ‚¨õ ‚¨õ ‚¨õ ‚¨õ" for letter in LETTERS]
    return "\n".join([header] + rows)

def format_instruction(coords: list, revealed: int):
    total = len(coords)
    if total == 0:
        return ""
    if revealed <= 0:
        preview = f"{coords[0]} ‚Üí ‚Ä¶"
    elif revealed >= total:
        preview = " ‚Üí ".join(coords)
    else:
        preview = " ‚Üí ".join(coords[:revealed]) + " ‚Üí ‚Ä¶"
    return f"–ù–∞–∂–∏–º–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É: {preview}\n(–æ—Ç–∫—Ä—ã—Ç–æ {revealed} –∏–∑ {total})"

# ========= –°–æ–≤–µ—Ç—ã (–∑–∞–≥–ª—É—à–∫–∏) =========
DISCLAIMER = (
    "‚ö†Ô∏è –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:\n"
    "–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.\n\n"
)

# NOTE: –æ—Å—Ç–∞–≤–∏–ª —Ç–µ–∫—Å—Ç—ã —Ç–≤–æ–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∫–∞–∫ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
TIPS_PAGES = [
    (
        "üí° –°–æ–≤–µ—Ç 1 ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫",
        DISCLAIMER + f"... (–∫–æ–Ω—Ç–µ–Ω—Ç) ...\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @abyzimtyt1win\n–°—Å—ã–ª–∫–∞: {PARTNER_LINK}"
    ),
    (
        "üí° –°–æ–≤–µ—Ç 2 ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫",
        DISCLAIMER + f"... (–∫–æ–Ω—Ç–µ–Ω—Ç) ...\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @abyzimtyt1win\n–°—Å—ã–ª–∫–∞: {PARTNER_LINK}"
    ),
    (
        "üí° –°–æ–≤–µ—Ç 3 ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫",
        DISCLAIMER + f"... (–∫–æ–Ω—Ç–µ–Ω—Ç) ...\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @abyzimtyt1win\n–°—Å—ã–ª–∫–∞: {PARTNER_LINK}"
    ),
]

def render_tips_page(page_index: int):
    total = len(TIPS_PAGES)
    page_index = max(0, min(total - 1, page_index))
    title, body = TIPS_PAGES[page_index]
    header = f"{title}\n\n–°—Ç—Ä. {page_index + 1}/{total}\n\n"
    text = header + body

    mk = InlineKeyboardMarkup(row_width=3)
    btns = []
    if page_index > 0:
        btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tips_page_{page_index}"))
    # —Å—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ª–µ–π–±–ª, —Å–¥–µ–ª–∞–ª noop
    btns.append(InlineKeyboardButton(f"{page_index + 1}/{total}", callback_data="noop"))
    if page_index < total - 1:
        btns.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"tips_page_{page_index + 2}"))
    if btns:
        mk.add(*btns)
    mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return text, mk

# ========= safe edit message =========
def safe_edit_message_text(text, chat_id, message_id, reply_markup=None, parse_mode='Markdown'):
    try:
        bot.edit_message_text(
            text, chat_id, message_id, parse_mode=parse_mode, reply_markup=reply_markup
        )
    except ApiTelegramException as e:
        try:
            err_str = str(e).lower()
            if 'message is not modified' in err_str or 'not modified' in err_str:
                return
            # –∏–Ω–æ–≥–¥–∞ –µ—Å—Ç—å description
            if 'description' in dir(e) and e.description and 'not modified' in str(e.description).lower():
                return
        except Exception:
            pass
        # –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º —Ç—Ä–µ–π—Å –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
        print("‚ö†Ô∏è ApiTelegramException –≤ safe_edit_message_text:")
        traceback.print_exc()
        raise

# ========= –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ) =========
def auto_update_signals():
    while not shutdown_flag:
        time.sleep(10)
        try:
            users = load_users_data()
            for uid, udata in list(users.items()):
                try:
                    if udata.get("auto_update"):
                        now = time.time()
                        if now - udata.get("last_signal_time", 0) < 10:
                            continue
                        sig = generate_signal()
                        number = random.randint(1000, 9999)
                        coords = generate_coords_sequence(sig["clicks"])
                        users[uid]["current_signal"] = {
                            "number": number,
                            "coords": coords,
                            "revealed": 0,
                            "created_at": now,
                            "win_chance": sig["win_chance"],
                            "bet_amount": sig["bet_amount"],
                            "clicks": sig["clicks"],
                            "multiplier": sig["multiplier"]
                        }
                        users[uid]["last_signal_time"] = now
                        save_users_data(users)

                        grid = render_grid_with_labels()
                        instr = format_instruction(coords, 0)
                        text = (
                            f"üîÑ *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê*\n\n"
                            f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{number}*\n\n"
                            f"üî• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: *{sig['win_chance']}%*\n"
                            f"üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: *{sig['bet_amount']}‚ÇΩ*\n"
                            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: *{sig['clicks']}*\n"
                            f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: *x{sig['multiplier']}*\n\n"
                            f"üó∫Ô∏è *–°–µ—Ç–∫–∞:*\n{grid}\n\n"
                            f"üìå {instr}\n\n"
                            f"üïê –í—Ä–µ–º—è (–ú–°–ö): *{get_msk_time_str()}*"
                        )
                        mk = InlineKeyboardMarkup(row_width=2)
                        mk.add(InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", callback_data="next_step"))
                        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        try:
                            bot.send_message(int(uid), text, parse_mode='Markdown', reply_markup=mk)
                        except Exception:
                            # –Ω–µ –ø–∞–¥–∞–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫ –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
                            traceback.print_exc()
                except Exception:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {uid}:")
                    traceback.print_exc()
        except Exception:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ auto_update_signals (–≤–Ω–µ—à–Ω—è—è):")
            traceback.print_exc()

# ========= –ö–æ–º–∞–Ω–¥—ã =========
@bot.message_handler(commands=["start"])
def start_command(message):
    user_id = str(message.from_user.id)
    data = load_users_data()
    ensure_user_data(user_id, data)
    welcome = (
        "üé∞ *VIP –°–ò–ì–ù–ê–õ–´ MINES*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    )
    bot.reply_to(message, welcome, parse_mode='Markdown', reply_markup=get_main_menu())

@bot.message_handler(commands=["status"])
def status_command(message):
    user_id = str(message.from_user.id)
    data = load_users_data()
    ensure_user_data(user_id, data)
    st = data[user_id]["stats"]
    text = (
        "üìä *–°–¢–ê–¢–£–°*\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {st.get('balance',0)}‚ÇΩ\n"
        f"‚úÖ –ü–æ–±–µ–¥—ã: {st.get('wins',0)}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {st.get('losses',0)}"
    )
    bot.reply_to(message, text, parse_mode='Markdown', reply_markup=get_main_menu())

# ========= Callback =========
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    data = load_users_data()
    ensure_user_data(user_id, data)

    # noop
    if call.data == "noop":
        # –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏
        try:
            bot.answer_callback_query(call.id)
        except Exception:
            pass
        return

    # –°–æ–≤–µ—Ç—ã: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if call.data == "tips_page_1":
        try:
            text, mk = render_tips_page(0)
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è tips_page_N
    if call.data.startswith("tips_page_"):
        try:
            idx = int(call.data.split("_")[-1]) - 1
        except Exception:
            idx = 0
        try:
            text, mk = render_tips_page(idx)
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    if call.data == "back_to_main":
        main_text = (
            "üé∞ *VIP –°–ò–ì–ù–ê–õ–´ MINES*\n\n"
            "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
        )
        try:
            safe_edit_message_text(main_text, call.message.chat.id, call.message.message_id,
                                   reply_markup=get_main_menu())
        except Exception:
            traceback.print_exc()
        return

    if call.data == "settings":
        auto_status = "üü¢ –í–ö–õ" if data[user_id].get("auto_update") else "üî¥ –í–´–ö–õ"
        text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {auto_status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
        )
        mk = InlineKeyboardMarkup(row_width=2)
        if data[user_id].get("auto_update"):
            mk.add(InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ", callback_data="disable_auto"))
        else:
            mk.add(InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ", callback_data="enable_auto"))
        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    if call.data == "enable_auto":
        data[user_id]["auto_update"] = True
        save_users_data(data)
        text = "‚úÖ *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ö–õ–Æ–ß–ï–ù–û*\n\n–¢–µ–ø–µ—Ä—å —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id,
                                   reply_markup=get_main_menu())
        except Exception:
            traceback.print_exc()
        return

    if call.data == "disable_auto":
        data[user_id]["auto_update"] = False
        save_users_data(data)
        text = "‚ùå *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ö–õ–Æ–ß–ï–ù–û*\n\n–ü–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é."
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id,
                                   reply_markup=get_main_menu())
        except Exception:
            traceback.print_exc()
        return

    if call.data == "stats":
        st = data[user_id]["stats"]
        text = (
            "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {st.get('balance',0)}‚ÇΩ\n"
            f"‚úÖ –ü–æ–±–µ–¥—ã: {st.get('wins',0)}\n"
            f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {st.get('losses',0)}"
        )
        mk = InlineKeyboardMarkup()
        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    if call.data == "balance":
        st = data[user_id]["stats"]
        text = (
            "üí∞ *–ë–ê–õ–ê–ù–°*\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {st.get('balance',0)}‚ÇΩ\n"
            f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ (–ú–°–ö): {get_msk_time_str()}"
        )
        mk = InlineKeyboardMarkup()
        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    if call.data == "get_signal":
        now = time.time()
        if now - data[user_id].get("last_signal_time", 0) < 10:
            cooldown = 10 - int(now - data[user_id].get("last_signal_time", 0))
            text = (
                "‚è∞ *–ü–ï–†–ï–ó–ê–†–Ø–î–ö–ê –ê–ö–¢–ò–í–ù–ê*\n\n"
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å: {cooldown} —Å–µ–∫\n"
                "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
            )
            mk = InlineKeyboardMarkup(row_width=2)
            mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
            except Exception:
                traceback.print_exc()
            return

        sig = generate_signal()
        number = random.randint(1000, 9999)
        coords = generate_coords_sequence(sig["clicks"])
        data[user_id]["current_signal"] = {
            "number": number,
            "coords": coords,
            "revealed": 0,
            "created_at": now,
            "win_chance": sig["win_chance"],
            "bet_amount": sig["bet_amount"],
            "clicks": sig["clicks"],
            "multiplier": sig["multiplier"]
        }
        data[user_id]["last_signal_time"] = now
        save_users_data(data)

        grid = render_grid_with_labels()
        instr = format_instruction(coords, 0)
        text = (
            f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{number}*\n\n"
            f"üî• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: {sig['win_chance']}%\n"
            f"üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {sig['bet_amount']}‚ÇΩ\n"
            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {sig['clicks']}\n"
            f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{sig['multiplier']}\n\n"
            f"üó∫Ô∏è *–°–µ—Ç–∫–∞:*\n{grid}\n\n"
            f"üìå {instr}\n\n"
            f"‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥"
        )
        mk = InlineKeyboardMarkup(row_width=2)
        mk.add(InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", callback_data="next_step"))
        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
        except Exception:
            traceback.print_exc()
        return

    if call.data == "next_step":
        cur = data[user_id].get("current_signal")
        if not cur or not isinstance(cur, dict) or not cur.get("coords"):
            text = "üí° *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.*\n–ù–∞–∂–º–∏—Ç–µ ¬´VIP –°–∏–≥–Ω–∞–ª¬ª."
            mk = InlineKeyboardMarkup()
            mk.add(InlineKeyboardButton("‚ö° VIP –°–∏–≥–Ω–∞–ª", callback_data="get_signal"))
            try:
                safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
            except Exception:
                traceback.print_exc()
            return

        revealed = cur["revealed"]
        total = len(cur["coords"])
        if revealed < total:
            revealed += 1
            cur["revealed"] = revealed
            data[user_id]["current_signal"] = cur
            save_users_data(data)

            grid = render_grid_with_labels()
            instr = format_instruction(cur["coords"][:revealed], revealed)
            text = (
                f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{cur.get('number','')}*\n\n"
                f"üî• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: {cur.get('win_chance','')}%\n"
                f"üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {cur.get('bet_amount','')}‚ÇΩ\n"
                f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {cur.get('clicks','')}\n"
                f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{cur.get('multiplier','')}\n\n"
                f"üó∫Ô∏è *–°–µ—Ç–∫–∞:*\n{grid}\n\n"
                f"üìå {instr}\n\n"
                f"‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥"
            )
            mk = InlineKeyboardMarkup(row_width=2)
            if revealed < total:
                mk.add(InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", callback_data="next_step"))
            mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
            except Exception:
                traceback.print_exc()
            return

        # –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        text = (
            f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{cur.get('number','')}*\n\n"
            "üéâ *–°–ò–ì–ù–ê–õ –ó–ê–í–ï–†–®–ï–ù!*"
        )
        mk = InlineKeyboardMarkup()
        mk.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            safe_edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mk)
            data[user_id]["current_signal"] = None
            save_users_data(data)
        except Exception:
            traceback.print_exc()
        return

# ========= –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ =========
def signal_handler(signum, frame):
    global shutdown_flag
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ‚Ä¶")
    shutdown_flag = True
    try:
        bot.stop_polling()
    except Exception:
        pass
    sys.exit(0)

# ========= –ó–∞–ø—É—Å–∫ =========
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        me = bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{me.username} (id={me.id})")
    except ApiTelegramException as e:
        if getattr(e, "error_code", None) == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN (401).")
            sys.exit(1)
        print("‚ö†Ô∏è ApiTelegramException –ø—Ä–∏ get_me():")
        traceback.print_exc()
        sys.exit(1)
    except Exception:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:")
        traceback.print_exc()
        sys.exit(1)

    th = threading.Thread(target=auto_update_signals, daemon=True)
    th.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª–ª–∏–Ω–≥‚Ä¶")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)
