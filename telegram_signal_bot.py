import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import random
import time
import threading
import requests
from bs4 import BeautifulSoup
import re
import signal
import sys

import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8351426493:AAEL5tOkQCMGP4aeEyzRqieuspIKR1kgRfA")
PARTNER_LINK = os.environ.get("PARTNER_LINK", "https://1wbtqu.life/casino/list?open=register&p=ufc1")
PROMO_CODE = os.environ.get("PROMO_CODE", "AVIATWIN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users_data.json"

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_flag = False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global shutdown_flag
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    shutdown_flag = True
    bot.stop_polling()
    sys.exit(0)

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users_data(users_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, ensure_ascii=False, indent=2)

def init_user(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        'registered': False,
        'id_verified': False,
        'auto_update': False,
        'current_balance': 0,
        'total_wins': 0,
        'total_losses': 0,
        'real_id': None,
        'verification_method': None
    }

def get_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
        InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ ID", callback_data="enter_id")
    )
    markup.add(
        InlineKeyboardButton("üé∞ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    markup.add(
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    return markup

def generate_signal():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    win_chance = random.randint(75, 98)
    bet_amount = random.choice([50, 100, 200, 300, 500, 1000])
    clicks = random.randint(2, 5)
    multiplier = round(random.uniform(1.5, 4.0), 2)
    
    return {
        'win_chance': win_chance,
        'bet_amount': bet_amount,
        'clicks': clicks,
        'multiplier': multiplier
    }

# Real ID verification via web scraping
def real_id_verification(input_id):
    time.sleep(2)  # Imitation of delay

    # Check ID format
    if not input_id.isdigit():
        return False, "ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"

    if len(input_id) < 6 or len(input_id) > 12:
        return False, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 12 —Ü–∏—Ñ—Ä"

    try:
        # Method 1: Check via referral link
        ref_url = f"https://1wbtqu.life/casino/list?open=register&p=ufc1&ref={input_id}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        response = requests.get(ref_url, headers=headers, timeout=10)

        # If page loads successfully
        if response.status_code == 200:
            # Check page content
            soup = BeautifulSoup(response.content, 'html.parser')

            # Look for signs of an existing user
            if soup.find('div', class_='user-profile') or soup.find('div', class_='account-info'):
                # User found - generate "real" user data
                balance = random.randint(500, 50000)
                total_games = random.randint(10, 500)
                wins = int(total_games * random.uniform(0.6, 0.8))
                losses = total_games - wins

                return True, {
                    'balance': balance,
                    'total_games': total_games,
                    'wins': wins,
                    'losses': losses,
                    'win_rate': round(wins / total_games * 100, 1),
                    'verification_method': 'web_check'
                }

        # Method 2: Check via API (if available)
        try:
            api_url = f"https://api.1win.com/user/{input_id}/status"
            api_response = requests.get(api_url, headers=headers, timeout=5)

            if api_response.status_code == 200:
                user_data = api_response.json()
                if user_data.get('exists', False):
                    return True, {
                        'balance': user_data.get('balance', random.randint(500, 50000)),
                        'total_games': user_data.get('games', random.randint(10, 500)),
                        'wins': user_data.get('wins', 0),
                        'losses': user_data.get('losses', 0),
                        'win_rate': user_data.get('win_rate', 75.0),
                        'verification_method': 'api_check'
                    }
        except:
            pass

        # Method 3: Check via database search (algorithmic fallback)
        if int(input_id) % 2 == 0 and '0' not in str(input_id) and '5' not in str(input_id):
            # ID passes "database check"
            balance = random.randint(1000, 30000)
            total_games = random.randint(20, 300)
            wins = int(total_games * random.uniform(0.65, 0.85))
            losses = total_games - wins

            return True, {
                'balance': balance,
                'total_games': total_games,
                'wins': wins,
                'losses': losses,
                'win_rate': round(wins / total_games * 100, 1),
                'verification_method': 'database_check'
            }

        # If all methods failed
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"

    except requests.exceptions.RequestException:
        # If unable to connect to server
        return False, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    except Exception as e:
        # Other errors
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"

def check_user_balance(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è)"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
        api_url = f"https://api.1win.com/user/{user_id}/balance"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(api_url, headers=headers, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('balance', random.randint(1000, 50000))
    except:
        pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return random.randint(1000, 50000)

def auto_update_signals():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    while True:
        time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        current_users_data = load_users_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        for user_id in current_users_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auto_update –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (current_users_data[user_id].get('id_verified', False) and 
                current_users_data[user_id].get('auto_update', False)):
                try:
                    signal = generate_signal()
                    update_text = (
                        f"üîÑ *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê*\n\n"
                        f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{random.randint(1000, 9999)}*\n\n"
                        f"üî• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: *{signal['win_chance']}%*\n"
                        f"üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: *{signal['bet_amount']}‚ÇΩ*\n"
                        f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: *{signal['clicks']}*\n"
                        f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: *x{signal['multiplier']}*\n\n"
                        f"‚ö° –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥\n\n"
                        f"üí° *–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\"*"
                    )
                    
                    markup = InlineKeyboardMarkup(row_width=2)
                    markup.add(
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="get_signal"),
                        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
                    )
                    markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                    bot.send_message(int(user_id), update_text, parse_mode='Markdown', reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = str(message.from_user.id)
    users_data = load_users_data()
    
    if user_id not in users_data:
        users_data[user_id] = init_user(user_id)
        save_users_data(users_data)
    
    welcome_text = (
        f"üé∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –°–∏–≥–Ω–∞–ª—ã Mines!*\n\n"
        f"üî• *–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–≥—Ä—ã Mines*\n"
        f"üìà *–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤*\n"
        f"üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å*\n\n"
        f"*–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:*\n"
        f"1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ\n"
        f"2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID\n"
        f"3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ VIP —Å–∏–≥–Ω–∞–ª—ã!\n\n"
        f"*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.*"
    )
    
    bot.reply_to(message, welcome_text, parse_mode='Markdown', reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    users_data = load_users_data()
    
    if user_id not in users_data:
        users_data[user_id] = init_user(user_id)
        save_users_data(users_data)
    
    if call.data == "register":
        register_text = (
            f"üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ 1win*\n\n"
            f"üîó *–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:*\n"
            f"`{PARTNER_LINK}`\n\n"
            f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{PROMO_CODE}`\n\n"
            f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
            f"2Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
            f"3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID\n"
            f"5Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ ID\n\n"
            f"*–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ \"–í–≤–µ—Å—Ç–∏ ID\"*"
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ ID", callback_data="enter_id"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(register_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
        
        users_data[user_id]['registered'] = True
        save_users_data(users_data)
    
    elif call.data == "enter_id":
        enter_id_text = (
            f"üîç *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID*\n\n"
            f"*ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏:*\n"
            f"‚Ä¢ –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ 1win\n"
            f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è\n"
            f"‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\"\n\n"
            f"*–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏*"
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(enter_id_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
        users_data[user_id]['waiting_for_id'] = True
        save_users_data(users_data)
    
    elif call.data == "get_signal":
        if not users_data[user_id].get('id_verified', False):
            error_text = (
                f"‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç*\n\n"
                f"*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
                f"1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ\n"
                f"2Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à ID\n\n"
                f"*–ù–∞–∂–º–∏—Ç–µ \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\" –¥–ª—è –Ω–∞—á–∞–ª–∞*"
            )
            
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"))
            markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id,
                                 parse_mode='Markdown', reply_markup=markup)
        else:
            signal = generate_signal()
            signal_text = (
                f"üé∞ *VIP –°–ò–ì–ù–ê–õ #{random.randint(1000, 9999)}*\n\n"
                f"üî• *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞:* {signal['win_chance']}%\n"
                f"üíµ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞:* {signal['bet_amount']}‚ÇΩ\n"
                f"üéØ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:* {signal['clicks']}\n"
                f"üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å:* x{signal['multiplier']}\n\n"
                f"‚ö° *–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥*"
            )
            
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="get_signal"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            )
            markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(signal_text, call.message.chat.id, call.message.message_id,
                                 parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "stats":
        if users_data[user_id].get('id_verified', False):
            total_games = users_data[user_id].get('total_wins', 0) + users_data[user_id].get('total_losses', 0)
            win_rate = round(users_data[user_id].get('total_wins', 0) / max(1, total_games) * 100, 1)
            
            stats_text = (
                f"üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                f"üÜî *ID:* `{users_data[user_id].get('real_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                f"üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {users_data[user_id].get('current_balance', 0)}‚ÇΩ\n"
                f"üéØ *–í—Å–µ–≥–æ –∏–≥—Ä:* {total_games}\n"
                f"‚úÖ *–ü–æ–±–µ–¥—ã:* {users_data[user_id].get('total_wins', 0)}\n"
                f"‚ùå *–ü–æ—Ä–∞–∂–µ–Ω–∏—è:* {users_data[user_id].get('total_losses', 0)}\n"
                f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* {win_rate}%\n\n"
                f"üîÑ *–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {'–í–∫–ª—é—á–µ–Ω–æ' if users_data[user_id].get('auto_update', False) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"üîç *–ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏:* {users_data[user_id].get('verification_method', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
        else:
            stats_text = (
                f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                f"‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç*\n\n"
                f"*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
                f"1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                f"2Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ID\n\n"
                f"*–ù–∞–∂–º–∏—Ç–µ \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\" –¥–ª—è –Ω–∞—á–∞–ª–∞*"
            )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "balance":
        if users_data[user_id].get('id_verified', False):
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            new_balance = check_user_balance(users_data[user_id].get('real_id', '0'))
            users_data[user_id]['current_balance'] = new_balance
            save_users_data(users_data)
            
            balance_text = (
                f"üí∞ *–í–ê–® –ë–ê–õ–ê–ù–°*\n\n"
                f"üÜî *ID:* `{users_data[user_id].get('real_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                f"üíµ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* *{new_balance}‚ÇΩ*\n"
                f"üìä *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {time.strftime('%H:%M:%S')}\n\n"
                f"*–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É*"
            )
        else:
            balance_text = (
                f"üí∞ *–ë–ê–õ–ê–ù–°*\n\n"
                f"‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç*\n\n"
                f"*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
                f"1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                f"2Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ID\n\n"
                f"*–ù–∞–∂–º–∏—Ç–µ \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\" –¥–ª—è –Ω–∞—á–∞–ª–∞*"
            )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(balance_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "settings":
        auto_status = "üü¢ –í–ö–õ" if users_data[user_id].get('auto_update', False) else "üî¥ –í–´–ö–õ"
        settings_text = (
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            f"üîÑ *–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:* {auto_status}\n\n"
            f"üì± *–û–ø—Ü–∏–∏:*\n"
            f"‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
            f"*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*"
        )
        
        markup = InlineKeyboardMarkup(row_width=2)
        if users_data[user_id].get('auto_update', False):
            markup.add(InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ", callback_data="disable_auto"))
        else:
            markup.add(InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ", callback_data="enable_auto"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(settings_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "enable_auto":
        users_data[user_id]['auto_update'] = True
        save_users_data(users_data)
        
        auto_text = (
            f"‚úÖ *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ö–õ–Æ–ß–ï–ù–û*\n\n"
            f"üîÑ *–°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥*\n\n"
            f"*–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö*"
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(auto_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "disable_auto":
        users_data[user_id]['auto_update'] = False
        save_users_data(users_data)
        
        auto_text = (
            f"‚ùå *–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ö–õ–Æ–ß–ï–ù–û*\n\n"
            f"üîÑ *–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ \"–û–±–Ω–æ–≤–∏—Ç—å\"*\n\n"
            f"*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ \"–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª\"*"
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üé∞ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(auto_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)
    
    elif call.data == "back_to_main":
        main_text = (
            f"üé∞ *VIP –°–ò–ì–ù–ê–õ–´ MINES*\n\n"
            f"*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*\n\n"
            f"üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è* - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ 1win\n"
            f"üîç *–í–≤–µ—Å—Ç–∏ ID* - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n"
            f"üé∞ *–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª* - –ø–æ–ª—É—á–∏—Ç—å VIP –ø—Ä–æ–≥–Ω–æ–∑\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å* - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        )
        
        bot.edit_message_text(main_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ ID)
@bot.message_handler(func=lambda message: True)
def process_id_input(message):
    user_id = str(message.from_user.id)
    users_data = load_users_data()
    
    if user_id not in users_data:
        users_data[user_id] = init_user(user_id)
        save_users_data(users_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ ID
    if users_data[user_id].get('waiting_for_id', False):
        input_id = message.text.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        checking_msg = bot.reply_to(message, "üîç *–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä–∞–º 1win...*", parse_mode='Markdown')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ID
        success, result = real_id_verification(input_id)
        
        if success:
            # ID –ø—Ä–∏–Ω—è—Ç
            user_data = result
            users_data[user_id]['id_verified'] = True
            users_data[user_id]['real_id'] = input_id
            users_data[user_id]['current_balance'] = user_data['balance']
            users_data[user_id]['total_wins'] = user_data['wins']
            users_data[user_id]['total_losses'] = user_data['losses']
            users_data[user_id]['verification_method'] = user_data['verification_method']
            users_data[user_id]['waiting_for_id'] = False
            save_users_data(users_data)
            
            success_text = (
                f"‚úÖ *ID –ü–†–ò–ù–Ø–¢!*\n\n"
                f"üÜî *–í–∞—à ID:* `{input_id}`\n"
                f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {user_data['balance']}‚ÇΩ\n"
                f"üéØ *–í—Å–µ–≥–æ –∏–≥—Ä:* {user_data['total_games']}\n"
                f"‚úÖ *–ü–æ–±–µ–¥—ã:* {user_data['wins']}\n"
                f"‚ùå *–ü–æ—Ä–∞–∂–µ–Ω–∏—è:* {user_data['losses']}\n"
                f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* {user_data['win_rate']}%\n"
                f"üîç *–ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏:* {user_data['verification_method']}\n\n"
                f"üéâ *–î–û–°–¢–£–ü –û–¢–ö–†–´–¢!*\n"
                f"*–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å VIP —Å–∏–≥–Ω–∞–ª—ã!*"
            )
            
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("üé∞ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            )
            markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(success_text, checking_msg.chat.id, checking_msg.message_id,
                                 parse_mode='Markdown', reply_markup=markup)
        else:
            # ID –æ—Ç–∫–ª–æ–Ω–µ–Ω
            users_data[user_id]['waiting_for_id'] = False
            save_users_data(users_data)
            
            error_text = (
                f"‚ùå *ID –û–¢–ö–õ–û–ù–ï–ù*\n\n"
                f"*–ü—Ä–∏—á–∏–Ω–∞:* {result}\n\n"
                f"*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:*\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID\n"
                f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ 1win\n"
                f"‚Ä¢ –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
                f"*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*"
            )
            
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ ID", callback_data="enter_id"))
            markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(error_text, checking_msg.chat.id, checking_msg.message_id,
                                 parse_mode='Markdown', reply_markup=markup)
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.", reply_markup=get_main_menu())

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_auto_update():
    auto_update_signals()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ VIP –°–∏–≥–Ω–∞–ª—ã Mines –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û—á–∏—â–∞–µ–º webhook'–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        print("üßπ –û—á–∏—Å—Ç–∫–∞ webhook'–æ–≤...")
        bot.remove_webhook()
        time.sleep(2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ API
        try:
            import requests
            webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
            response = requests.post(webhook_url, json={"drop_pending_updates": True})
            if response.status_code == 200:
                print("‚úÖ Webhook'–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook'–æ–≤: {response.status_code}")
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            updates_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            response = requests.get(updates_url, params={"offset": -1, "limit": 1})
            if response.status_code == 200:
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ webhook'–æ–≤: {e}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook'–æ–≤: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    auto_update_thread = threading.Thread(target=start_auto_update, daemon=True)
    auto_update_thread.start()
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
    print("üé∞ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    retry_count = 0
    max_retries = 10
    use_webhook = False
    
    while not shutdown_flag and retry_count < max_retries:
        try:
            if not use_webhook:
                print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —á–µ—Ä–µ–∑ polling...")
                bot.polling(none_stop=True, timeout=60)
            else:
                print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —á–µ—Ä–µ–∑ webhook...")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ webhook
                bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 409:
                retry_count += 1
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
                print("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook'–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook'–æ–≤
                try:
                    bot.remove_webhook()
                    time.sleep(3)
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ API
                    webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
                    response = requests.post(webhook_url, json={"drop_pending_updates": True})
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    updates_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
                    response = requests.get(updates_url, params={"offset": -1, "limit": 1})
                    
                    print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    time.sleep(5)
                except Exception as cleanup_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {cleanup_error}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ webhook –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
                if retry_count >= 3 and not use_webhook:
                    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ webhook —Ä–µ–∂–∏–º...")
                    use_webhook = True
                
                wait_time = min(60 * retry_count, 600)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 10 –º–∏–Ω—É—Ç
                print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
                continue
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            continue
    
    if retry_count >= max_retries:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")